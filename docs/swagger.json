{
    "swagger": "2.0",
    "info": {
        "title": "Airline REST API",
        "contact": {}
    },
    "host": "192.168.100.7:3000",
    "basePath": "/",
    "paths": {
        "/api/v1/accountant/calculateMoney": {
            "get": {
                "description": "Fetch cars that are within the specified time range. 2025-01-29 13:07:31 2025-01-29 14:09:19",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "Accountant"
                ],
                "summary": "Calculate cars based on start and end time",
                "parameters": [
                    {
                        "type": "string",
                        "example": "\"2025-01-29 10:13:51\"",
                        "description": "Start Time",
                        "name": "start",
                        "in": "query"
                    },
                    {
                        "type": "string",
                        "example": "\"2025-01-29 12:15:10\"",
                        "description": "End Time",
                        "name": "end",
                        "in": "query"
                    }
                ],
                "responses": {
                    "200": {
                        "description": "List of cars",
                        "schema": {
                            "type": "array",
                            "items": {
                                "$ref": "#/definitions/modelscar.Car_Model"
                            }
                        }
                    }
                }
            }
        },
        "/api/v1/auth/login": {
            "post": {
                "description": "{ \"username\": \"Dowran\", \"password\": \"12345678\", \"parkno\": \"P4\" }",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "Auth"
                ],
                "summary": "Login User",
                "parameters": [
                    {
                        "description": "User Login Data",
                        "name": "credentials",
                        "in": "body",
                        "required": true,
                        "schema": {
                            "$ref": "#/definitions/usercontrol.LoginInput"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "message: Login successful",
                        "schema": {
                            "type": "object",
                            "additionalProperties": {
                                "type": "string"
                            }
                        }
                    },
                    "400": {
                        "description": "message: Invalid request body",
                        "schema": {
                            "type": "object",
                            "additionalProperties": {
                                "type": "string"
                            }
                        }
                    },
                    "401": {
                        "description": "message: Invalid username or password",
                        "schema": {
                            "type": "object",
                            "additionalProperties": {
                                "type": "string"
                            }
                        }
                    },
                    "500": {
                        "description": "message: Internal Server Error",
                        "schema": {
                            "type": "object",
                            "additionalProperties": {
                                "type": "string"
                            }
                        }
                    }
                }
            }
        },
        "/api/v1/auth/logout": {
            "post": {
                "description": "Ends the session of a logged-in user by deleting the JWT token cookie.",
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "Auth"
                ],
                "summary": "Logout User",
                "responses": {
                    "200": {
                        "description": "message: Logout successful",
                        "schema": {
                            "type": "object",
                            "additionalProperties": {
                                "type": "string"
                            }
                        }
                    },
                    "500": {
                        "description": "message: Internal Server Error",
                        "schema": {
                            "type": "object",
                            "additionalProperties": {
                                "type": "string"
                            }
                        }
                    }
                }
            }
        },
        "/api/v1/auth/me": {
            "get": {
                "description": "Retrieves the current user's username, role, and user ID from the JWT token.",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "Auth"
                ],
                "summary": "Get current user information",
                "responses": {
                    "200": {
                        "description": "Returns user information",
                        "schema": {
                            "type": "object",
                            "additionalProperties": true
                        }
                    },
                    "400": {
                        "description": "message: Bad Request - Missing data from middleware",
                        "schema": {
                            "type": "object",
                            "additionalProperties": {
                                "type": "string"
                            }
                        }
                    },
                    "401": {
                        "description": "message: Unauthorized - Invalid token",
                        "schema": {
                            "type": "object",
                            "additionalProperties": {
                                "type": "string"
                            }
                        }
                    },
                    "500": {
                        "description": "message: Internal Server Error - Missing data from middleware",
                        "schema": {
                            "type": "object",
                            "additionalProperties": {
                                "type": "string"
                            }
                        }
                    }
                }
            }
        },
        "/api/v1/auth/register": {
            "post": {
                "description": "Creates a new user and stores their hashed password. Example: { \"username\": \"newUser\", \"password\": \"password123\", \"firstname\": \"John\", \"lastname\": \"Doe\", \"role\": \"admin\" }",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "Auth"
                ],
                "summary": "Register User",
                "parameters": [
                    {
                        "description": "User Registration Data",
                        "name": "user",
                        "in": "body",
                        "required": true,
                        "schema": {
                            "$ref": "#/definitions/modelsuser.User"
                        }
                    }
                ],
                "responses": {
                    "201": {
                        "description": "message: User Created",
                        "schema": {
                            "type": "object",
                            "additionalProperties": {
                                "type": "string"
                            }
                        }
                    },
                    "400": {
                        "description": "message: Password must be at least 8 characters long",
                        "schema": {
                            "type": "object",
                            "additionalProperties": {
                                "type": "string"
                            }
                        }
                    },
                    "500": {
                        "description": "message: Internal Server Error",
                        "schema": {
                            "type": "object",
                            "additionalProperties": {
                                "type": "string"
                            }
                        }
                    }
                }
            }
        },
        "/api/v1/camera/getdata": {
            "put": {
                "description": "{\"EventComment\": \"BE5084AG\"}",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "Car Entry"
                ],
                "summary": "Create a car exit record in the parking lot",
                "parameters": [
                    {
                        "description": "Captured data from the camera",
                        "name": "request",
                        "in": "body",
                        "required": true,
                        "schema": {
                            "$ref": "#/definitions/camera.CapturedEventData"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "Car exit updated successfully",
                        "schema": {
                            "$ref": "#/definitions/resmodel.Response"
                        }
                    },
                    "400": {
                        "description": "Bad request, car already exited",
                        "schema": {
                            "$ref": "#/definitions/resmodel.ErrorResponse"
                        }
                    },
                    "404": {
                        "description": "Car not found",
                        "schema": {
                            "$ref": "#/definitions/resmodel.ErrorResponse"
                        }
                    },
                    "500": {
                        "description": "Internal server error, failed to update data",
                        "schema": {
                            "$ref": "#/definitions/resmodel.ErrorResponse"
                        }
                    }
                }
            },
            "post": {
                "description": "{\"ChannelName\": \"P41\", \"EventComment\": \"BE5084AG\"}",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "Car Entry"
                ],
                "summary": "Create a new car entry in the parking lot",
                "parameters": [
                    {
                        "description": "Captured data from the camera",
                        "name": "request",
                        "in": "body",
                        "required": true,
                        "schema": {
                            "$ref": "#/definitions/camera.CapturedEventData"
                        }
                    }
                ],
                "responses": {
                    "201": {
                        "description": "Car entry created successfully",
                        "schema": {
                            "$ref": "#/definitions/resmodel.Response"
                        }
                    },
                    "400": {
                        "description": "Bad request, car is already inside",
                        "schema": {
                            "$ref": "#/definitions/resmodel.ErrorResponse"
                        }
                    },
                    "500": {
                        "description": "Internal server error, failed to save data",
                        "schema": {
                            "$ref": "#/definitions/resmodel.ErrorResponse"
                        }
                    }
                }
            }
        },
        "/api/v1/camera/updatecar/{plate}": {
            "put": {
                "description": "Updates a car's status and calculates payment and duration based on start and end times.",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "cars"
                ],
                "summary": "Update a car by plate number",
                "parameters": [
                    {
                        "type": "string",
                        "description": "Car plate number",
                        "name": "plate",
                        "in": "path",
                        "required": true
                    },
                    {
                        "description": "Car details to update",
                        "name": "car",
                        "in": "body",
                        "required": true,
                        "schema": {
                            "$ref": "#/definitions/modelscar.CarUpdate"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "Updated car details",
                        "schema": {
                            "type": "object",
                            "additionalProperties": true
                        }
                    },
                    "400": {
                        "description": "Car already exited or invalid request",
                        "schema": {
                            "$ref": "#/definitions/operator.ErrorResponse"
                        }
                    },
                    "404": {
                        "description": "Car not found",
                        "schema": {
                            "$ref": "#/definitions/operator.ErrorResponse"
                        }
                    },
                    "500": {
                        "description": "Error parsing time",
                        "schema": {
                            "$ref": "#/definitions/operator.ErrorResponse"
                        }
                    }
                }
            }
        },
        "/api/v1/cameras": {
            "get": {
                "description": "Retrieves a list of cameras from the database with pagination",
                "tags": [
                    "Cameras"
                ],
                "summary": "Get cameras with pagination",
                "parameters": [
                    {
                        "type": "integer",
                        "default": 1,
                        "description": "Page number",
                        "name": "page",
                        "in": "query"
                    },
                    {
                        "type": "integer",
                        "default": 10,
                        "description": "Number of items per page",
                        "name": "limit",
                        "in": "query"
                    }
                ],
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "$ref": "#/definitions/camera.Cameras"
                        }
                    },
                    "500": {
                        "description": "Internal server error",
                        "schema": {
                            "type": "string"
                        }
                    }
                }
            },
            "post": {
                "description": "Creates a new camera in the database with validation for camera type",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "Cameras"
                ],
                "summary": "Create a new camera",
                "parameters": [
                    {
                        "description": "Camera data",
                        "name": "camera",
                        "in": "body",
                        "required": true,
                        "schema": {
                            "$ref": "#/definitions/camera.Cameras"
                        }
                    }
                ],
                "responses": {
                    "201": {
                        "description": "Created",
                        "schema": {
                            "$ref": "#/definitions/camera.Cameras"
                        }
                    },
                    "400": {
                        "description": "Invalid camera type",
                        "schema": {
                            "type": "string"
                        }
                    },
                    "500": {
                        "description": "Internal server error",
                        "schema": {
                            "type": "string"
                        }
                    }
                }
            }
        },
        "/api/v1/cameras/{id}": {
            "get": {
                "description": "Retrieves the camera from the database using its unique ID",
                "tags": [
                    "Cameras"
                ],
                "summary": "Get a camera by ID",
                "parameters": [
                    {
                        "type": "integer",
                        "description": "Camera ID",
                        "name": "id",
                        "in": "path",
                        "required": true
                    }
                ],
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "$ref": "#/definitions/camera.Cameras"
                        }
                    },
                    "404": {
                        "description": "Camera not found",
                        "schema": {
                            "type": "string"
                        }
                    },
                    "500": {
                        "description": "Internal server error",
                        "schema": {
                            "type": "string"
                        }
                    }
                }
            },
            "put": {
                "description": "Updates the camera data in the database using its unique ID",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "Cameras"
                ],
                "summary": "Update a camera by ID",
                "parameters": [
                    {
                        "type": "integer",
                        "description": "Camera ID",
                        "name": "id",
                        "in": "path",
                        "required": true
                    },
                    {
                        "description": "Updated camera data",
                        "name": "camera",
                        "in": "body",
                        "required": true,
                        "schema": {
                            "$ref": "#/definitions/camera.Cameras"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "$ref": "#/definitions/camera.Cameras"
                        }
                    },
                    "400": {
                        "description": "Invalid camera data",
                        "schema": {
                            "type": "string"
                        }
                    },
                    "404": {
                        "description": "Camera not found",
                        "schema": {
                            "type": "string"
                        }
                    },
                    "500": {
                        "description": "Internal server error",
                        "schema": {
                            "type": "string"
                        }
                    }
                }
            },
            "delete": {
                "description": "Deletes the camera from the database using its unique ID",
                "tags": [
                    "Cameras"
                ],
                "summary": "Delete a camera by ID",
                "parameters": [
                    {
                        "type": "integer",
                        "description": "Camera ID",
                        "name": "id",
                        "in": "path",
                        "required": true
                    }
                ],
                "responses": {
                    "200": {
                        "description": "Camera deleted successfully",
                        "schema": {
                            "type": "string"
                        }
                    },
                    "404": {
                        "description": "Camera not found",
                        "schema": {
                            "type": "string"
                        }
                    },
                    "500": {
                        "description": "Internal server error",
                        "schema": {
                            "type": "string"
                        }
                    }
                }
            }
        },
        "/api/v1/getallcars": {
            "get": {
                "description": "Get list of cars with pagination",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "cars"
                ],
                "summary": "Get list of cars",
                "parameters": [
                    {
                        "type": "integer",
                        "default": 1,
                        "description": "Page number",
                        "name": "page",
                        "in": "query"
                    },
                    {
                        "type": "integer",
                        "default": 5,
                        "description": "Number of items per page",
                        "name": "limit",
                        "in": "query"
                    }
                ],
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "$ref": "#/definitions/operator.GetCarsResponse"
                        }
                    },
                    "400": {
                        "description": "Bad Request",
                        "schema": {
                            "$ref": "#/definitions/operator.ErrorResponse"
                        }
                    }
                }
            }
        },
        "/api/v1/getcar/{id}": {
            "get": {
                "description": "Get a car by ID",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "cars"
                ],
                "summary": "Get a car by ID",
                "parameters": [
                    {
                        "type": "integer",
                        "description": "Car ID",
                        "name": "id",
                        "in": "path",
                        "required": true
                    }
                ],
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "$ref": "#/definitions/modelscar.Car_Model"
                        }
                    },
                    "404": {
                        "description": "Not Found",
                        "schema": {
                            "$ref": "#/definitions/operator.ErrorResponse"
                        }
                    }
                }
            }
        },
        "/api/v1/searchcar": {
            "get": {
                "description": "Search for a car by plate number, parking number, and other optional filters",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "cars"
                ],
                "summary": "Search for a car by plate number and optional filters",
                "parameters": [
                    {
                        "type": "string",
                        "description": "Car plate number",
                        "name": "car_number",
                        "in": "query"
                    },
                    {
                        "type": "string",
                        "description": "Enter time (YYYY-MM-DD)",
                        "name": "enter_time",
                        "in": "query"
                    },
                    {
                        "type": "string",
                        "description": "End time (YYYY-MM-DD)",
                        "name": "end_time",
                        "in": "query"
                    },
                    {
                        "type": "string",
                        "description": "Parking spot number",
                        "name": "parkno",
                        "in": "query"
                    },
                    {
                        "type": "string",
                        "description": "Car status (Inside, Exited)",
                        "name": "status",
                        "in": "query"
                    },
                    {
                        "type": "integer",
                        "default": 1,
                        "description": "Page number",
                        "name": "page",
                        "in": "query"
                    },
                    {
                        "type": "integer",
                        "default": 5,
                        "description": "Number of items per page",
                        "name": "limit",
                        "in": "query"
                    }
                ],
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "$ref": "#/definitions/operator.GetCarsResponse"
                        }
                    },
                    "400": {
                        "description": "Bad Request",
                        "schema": {
                            "$ref": "#/definitions/operator.ErrorResponse"
                        }
                    }
                }
            }
        },
        "/api/v1/user/operators": {
            "get": {
                "description": "Retrieves a list of users who have the role \"operator\" in descending order by ID",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "Users"
                ],
                "summary": "Get all operators",
                "parameters": [
                    {
                        "type": "integer",
                        "default": 1,
                        "description": "Page number",
                        "name": "page",
                        "in": "query"
                    },
                    {
                        "type": "integer",
                        "default": 10,
                        "description": "Number of items per page",
                        "name": "limit",
                        "in": "query"
                    }
                ],
                "responses": {
                    "200": {
                        "description": "List of operators with pagination metadata",
                        "schema": {
                            "type": "object",
                            "additionalProperties": true
                        }
                    },
                    "404": {
                        "description": "No operators found",
                        "schema": {
                            "type": "object",
                            "additionalProperties": true
                        }
                    },
                    "500": {
                        "description": "Error retrieving users with operator role",
                        "schema": {
                            "type": "object",
                            "additionalProperties": true
                        }
                    }
                }
            }
        },
        "/api/v1/userCount": {
            "get": {
                "description": "Retrieves the count of all users and optionally filtered by role",
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "Users Count"
                ],
                "summary": "Get total number of users and the count of users by role",
                "responses": {}
            }
        },
        "/api/v1/users": {
            "get": {
                "description": "Retrieves a list of users with pagination support",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "Users"
                ],
                "summary": "Get all users",
                "parameters": [
                    {
                        "type": "integer",
                        "description": "Page number",
                        "name": "page",
                        "in": "query"
                    },
                    {
                        "type": "integer",
                        "description": "Limit per page",
                        "name": "limit",
                        "in": "query"
                    }
                ],
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "type": "object",
                            "additionalProperties": true
                        }
                    },
                    "500": {
                        "description": "Can not retrieve users",
                        "schema": {
                            "type": "string"
                        }
                    }
                }
            },
            "post": {
                "description": "Creates a new user in the database",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "Users"
                ],
                "summary": "Create a new user",
                "parameters": [
                    {
                        "description": "User data",
                        "name": "user",
                        "in": "body",
                        "required": true,
                        "schema": {
                            "$ref": "#/definitions/modelsuser.User"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "$ref": "#/definitions/modelsuser.User"
                        }
                    },
                    "400": {
                        "description": "Can not parse",
                        "schema": {
                            "type": "string"
                        }
                    },
                    "500": {
                        "description": "Can not create",
                        "schema": {
                            "type": "string"
                        }
                    }
                }
            }
        },
        "/api/v1/users/{id}": {
            "get": {
                "description": "Retrieves a user from the database using their unique ID",
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "Users"
                ],
                "summary": "Get user by ID",
                "parameters": [
                    {
                        "type": "integer",
                        "description": "User ID",
                        "name": "id",
                        "in": "path",
                        "required": true
                    }
                ],
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "$ref": "#/definitions/modelsuser.UserRes"
                        }
                    }
                }
            },
            "put": {
                "description": "Updates a user's data (isActive, username, firstname, lastname, etc.) in the database based on the input provided",
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "Users"
                ],
                "summary": "Update user fields based on the provided data",
                "parameters": [
                    {
                        "type": "integer",
                        "description": "User ID",
                        "name": "id",
                        "in": "path",
                        "required": true
                    },
                    {
                        "description": "User data to update",
                        "name": "user",
                        "in": "body",
                        "required": true,
                        "schema": {
                            "$ref": "#/definitions/modelsuser.User"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "$ref": "#/definitions/modelsuser.UserRes"
                        }
                    },
                    "400": {
                        "description": "Invalid user data",
                        "schema": {
                            "type": "string"
                        }
                    },
                    "404": {
                        "description": "User not found",
                        "schema": {
                            "type": "string"
                        }
                    },
                    "500": {
                        "description": "Error updating user",
                        "schema": {
                            "type": "string"
                        }
                    }
                }
            },
            "delete": {
                "description": "Deletes a user's information from the database using their unique ID",
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "Users"
                ],
                "summary": "Delete a user by ID",
                "parameters": [
                    {
                        "type": "integer",
                        "description": "User ID",
                        "name": "id",
                        "in": "path",
                        "required": true
                    }
                ],
                "responses": {
                    "200": {
                        "description": "User deleted successfully",
                        "schema": {
                            "type": "string"
                        }
                    },
                    "404": {
                        "description": "User not found",
                        "schema": {
                            "type": "string"
                        }
                    },
                    "500": {
                        "description": "Error deleting user",
                        "schema": {
                            "type": "string"
                        }
                    }
                }
            }
        }
    },
    "definitions": {
        "camera.CameraType": {
            "type": "string",
            "enum": [
                "inside",
                "outside"
            ],
            "x-enum-varnames": [
                "Inside",
                "Outside"
            ]
        },
        "camera.Cameras": {
            "type": "object",
            "properties": {
                "id": {
                    "type": "integer"
                },
                "name": {
                    "type": "string"
                },
                "type": {
                    "$ref": "#/definitions/camera.CameraType"
                }
            }
        },
        "camera.CapturedEventData": {
            "type": "object",
            "properties": {
                "ChannelName": {
                    "type": "string"
                },
                "EventComment": {
                    "type": "string"
                },
                "EventDescription": {
                    "type": "string"
                },
                "EventId": {
                    "type": "string"
                },
                "captured_time": {
                    "type": "string"
                }
            }
        },
        "modelscar.CarUpdate": {
            "type": "object",
            "properties": {
                "reason": {
                    "type": "string"
                }
            }
        },
        "modelscar.Car_Model": {
            "type": "object",
            "properties": {
                "car_number": {
                    "type": "string"
                },
                "duration": {
                    "type": "integer"
                },
                "end_time": {
                    "type": "string"
                },
                "id": {
                    "type": "integer"
                },
                "image_url": {
                    "type": "string"
                },
                "park_no": {
                    "type": "string"
                },
                "reason": {
                    "type": "string"
                },
                "start_time": {
                    "type": "string"
                },
                "status": {
                    "type": "string"
                },
                "total_payment": {
                    "type": "number"
                },
                "user_id": {
                    "type": "string"
                }
            }
        },
        "modelsuser.RoleType": {
            "type": "string",
            "enum": [
                "admin",
                "operator",
                "accountant"
            ],
            "x-enum-varnames": [
                "AdminRole",
                "OperatorRole",
                "AccountantRole"
            ]
        },
        "modelsuser.User": {
            "type": "object"
        },
        "modelsuser.UserRes": {
            "type": "object",
            "properties": {
                "firstname": {
                    "type": "string",
                    "example": "John"
                },
                "id": {
                    "type": "integer",
                    "format": "int64",
                    "example": 1
                },
                "isActive": {
                    "type": "boolean",
                    "example": true
                },
                "lastname": {
                    "type": "string",
                    "example": "Doe"
                },
                "park_no": {
                    "type": "string",
                    "example": "P123"
                },
                "role": {
                    "enum": [
                        "admin",
                        "operator",
                        "accountant"
                    ],
                    "allOf": [
                        {
                            "$ref": "#/definitions/modelsuser.RoleType"
                        }
                    ],
                    "example": "operator"
                },
                "username": {
                    "type": "string",
                    "example": "johndoe"
                }
            }
        },
        "operator.ErrorResponse": {
            "type": "object",
            "properties": {
                "error": {
                    "type": "string"
                },
                "message": {
                    "type": "string"
                }
            }
        },
        "operator.GetCarsResponse": {
            "type": "object",
            "properties": {
                "cars": {
                    "type": "array",
                    "items": {
                        "$ref": "#/definitions/modelscar.Car_Model"
                    }
                },
                "limit": {
                    "type": "integer"
                },
                "page": {
                    "type": "integer"
                },
                "total_count": {
                    "type": "integer"
                }
            }
        },
        "resmodel.ErrorResponse": {
            "type": "object",
            "properties": {
                "details": {
                    "type": "string"
                },
                "error": {
                    "type": "string"
                }
            }
        },
        "resmodel.Response": {
            "type": "object",
            "properties": {
                "data": {
                    "$ref": "#/definitions/modelscar.Car_Model"
                },
                "message": {
                    "type": "string"
                }
            }
        },
        "usercontrol.LoginInput": {
            "type": "object",
            "required": [
                "password",
                "username"
            ],
            "properties": {
                "parkno": {
                    "type": "string"
                },
                "password": {
                    "type": "string"
                },
                "username": {
                    "type": "string"
                }
            }
        }
    }
}